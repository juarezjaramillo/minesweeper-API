/*
 * Minesweeper API
 * A simple Minesweeper API for Deviget code challengue
 *
 * OpenAPI spec version: v1
 * Contact: juarezjaramillo@deviget.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Board', 'model/CellRef', 'model/NewBoard'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Board'), require('../model/CellRef'), require('../model/NewBoard'));
  } else {
    // Browser globals (root is window)
    if (!root.MinesweeperApi) {
      root.MinesweeperApi = {};
    }
    root.MinesweeperApi.BoardsApi = factory(root.MinesweeperApi.ApiClient, root.MinesweeperApi.Board, root.MinesweeperApi.CellRef, root.MinesweeperApi.NewBoard);
  }
}(this, function(ApiClient, Board, CellRef, NewBoard) {
  'use strict';

  /**
   * Boards service.
   * @module api/BoardsApi
   * @version v1
   */

  /**
   * Constructs a new BoardsApi. 
   * @alias module:api/BoardsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the boards operation.
     * @callback module:api/BoardsApi~boardsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Board>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all boards
     * Gets a list of all the available boards
     * @param {module:api/BoardsApi~boardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Board>}
     */
    this.boards = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Board];

      return this.apiClient.callApi(
        '/boards', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the boardsCreate operation.
     * @callback module:api/BoardsApi~boardsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Board} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create and start a new board
     * Create and start a new board with the specified number or rows, columns and mines
     * @param {module:model/NewBoard} data 
     * @param {module:api/BoardsApi~boardsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Board}
     */
    this.boardsCreate = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling boardsCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Board;

      return this.apiClient.callApi(
        '/boards', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the boardsDelete operation.
     * @callback module:api/BoardsApi~boardsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a board
     * Delete a single board
     * @param {Number} id A unique integer value identifying this board.
     * @param {module:api/BoardsApi~boardsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.boardsDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling boardsDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/boards/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the boardsFlagCell operation.
     * @callback module:api/BoardsApi~boardsFlagCellCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Flag a cell
     * Flag a particular cell
     * @param {Number} id A unique integer value identifying this board.
     * @param {module:model/CellRef} data 
     * @param {module:api/BoardsApi~boardsFlagCellCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.boardsFlagCell = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling boardsFlagCell");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling boardsFlagCell");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/boards/{id}/flag', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the boardsGet operation.
     * @callback module:api/BoardsApi~boardsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Board} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details of a board
     * Get the details of a single board
     * @param {Number} id A unique integer value identifying this board.
     * @param {module:api/BoardsApi~boardsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Board}
     */
    this.boardsGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling boardsGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Board;

      return this.apiClient.callApi(
        '/boards/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the boardsPause operation.
     * @callback module:api/BoardsApi~boardsPauseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Board} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pause a board
     * Pauses a board. While the board is paused, the elapsed time of the board does not increase
     * @param {Number} id A unique integer value identifying this board.
     * @param {module:api/BoardsApi~boardsPauseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Board}
     */
    this.boardsPause = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling boardsPause");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Board;

      return this.apiClient.callApi(
        '/boards/{id}/pause', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the boardsResume operation.
     * @callback module:api/BoardsApi~boardsResumeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Board} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resume a board
     * Resumes a board
     * @param {Number} id A unique integer value identifying this board.
     * @param {module:api/BoardsApi~boardsResumeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Board}
     */
    this.boardsResume = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling boardsResume");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Board;

      return this.apiClient.callApi(
        '/boards/{id}/resume', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the boardsRevealCell operation.
     * @callback module:api/BoardsApi~boardsRevealCellCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Board} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reveal a cell
     * Reveals a particular cell
     * @param {Number} id A unique integer value identifying this board.
     * @param {module:model/CellRef} data 
     * @param {module:api/BoardsApi~boardsRevealCellCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Board}
     */
    this.boardsRevealCell = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling boardsRevealCell");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling boardsRevealCell");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Board;

      return this.apiClient.callApi(
        '/boards/{id}/reveal', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the boardsUnflagCell operation.
     * @callback module:api/BoardsApi~boardsUnflagCellCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unflag a cell
     * Removes the flag a particular cell
     * @param {Number} id A unique integer value identifying this board.
     * @param {module:model/CellRef} data 
     * @param {module:api/BoardsApi~boardsUnflagCellCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.boardsUnflagCell = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling boardsUnflagCell");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling boardsUnflagCell");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/boards/{id}/flag', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
