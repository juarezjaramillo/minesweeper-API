/*
 * Minesweeper API
 * A simple Minesweeper API for the Deviget code challenge
 *
 * OpenAPI spec version: v1
 * Contact: juarezjaramillo@deviget.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MinesweeperApi);
  }
}(this, function(expect, MinesweeperApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MinesweeperApi.BoardsApi();
  });

  describe('(package)', function() {
    describe('BoardsApi', function() {
      describe('boards', function() {
        it('should call boards successfully', function(done) {
          // TODO: uncomment boards call and complete the assertions
          /*

          instance.boards(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(MinesweeperApi.Board);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be(0);
              expect(data.numRows).to.be.a('number');
              expect(data.numRows).to.be(0);
              expect(data.numColumns).to.be.a('number');
              expect(data.numColumns).to.be(0);
              expect(data.numMines).to.be.a('number');
              expect(data.numMines).to.be(0);
              expect(data.status).to.be.a('number');
              expect(data.status).to.be(0);
              expect(data.result).to.be.a('number');
              expect(data.result).to.be(0);
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
              expect(data.lastStarted).to.be.a(Date);
              expect(data.lastStarted).to.be(new Date());
              {
                let dataCtr = data.cells;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(MinesweeperApi.Cell);
                  expect(data.row).to.be.a('number');
                  expect(data.row).to.be(0);
                  expect(data.column).to.be.a('number');
                  expect(data.column).to.be(0);
                  expect(data.mine).to.be.a('boolean');
                  expect(data.mine).to.be(false);
                  expect(data.value).to.be.a('number');
                  expect(data.value).to.be(0);
                  expect(data.revealed).to.be.a('boolean');
                  expect(data.revealed).to.be(false);
                  expect(data.flagged).to.be.a('boolean');
                  expect(data.flagged).to.be(false);
  
                        }
              }
              expect(data.elapsed).to.be.a('number');
              expect(data.elapsed).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('boardsCreate', function() {
        it('should call boardsCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for boardsCreate call and complete the assertions
          /*
          var data = new MinesweeperApi.NewBoard();
          data.numRows = 0;
          data.numColumns = 0;
          data.numMines = 0;

          instance.boardsCreate(data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MinesweeperApi.Board);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.numRows).to.be.a('number');
            expect(data.numRows).to.be(0);
            expect(data.numColumns).to.be.a('number');
            expect(data.numColumns).to.be(0);
            expect(data.numMines).to.be.a('number');
            expect(data.numMines).to.be(0);
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(0);
            expect(data.result).to.be.a('number');
            expect(data.result).to.be(0);
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.lastStarted).to.be.a(Date);
            expect(data.lastStarted).to.be(new Date());
            {
              let dataCtr = data.cells;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(MinesweeperApi.Cell);
                expect(data.row).to.be.a('number');
                expect(data.row).to.be(0);
                expect(data.column).to.be.a('number');
                expect(data.column).to.be(0);
                expect(data.mine).to.be.a('boolean');
                expect(data.mine).to.be(false);
                expect(data.value).to.be.a('number');
                expect(data.value).to.be(0);
                expect(data.revealed).to.be.a('boolean');
                expect(data.revealed).to.be(false);
                expect(data.flagged).to.be.a('boolean');
                expect(data.flagged).to.be(false);

                      }
            }
            expect(data.elapsed).to.be.a('number');
            expect(data.elapsed).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('boardsDelete', function() {
        it('should call boardsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for boardsDelete call
          /*
          var id = 56;

          instance.boardsDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('boardsFlagCell', function() {
        it('should call boardsFlagCell successfully', function(done) {
          // TODO: uncomment, update parameter values for boardsFlagCell call
          /*
          var id = 56;
          var data = new MinesweeperApi.CellRef();
          data.row = 0;
          data.column = 0;

          instance.boardsFlagCell(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('boardsGet', function() {
        it('should call boardsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for boardsGet call and complete the assertions
          /*
          var id = 56;

          instance.boardsGet(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MinesweeperApi.Board);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.numRows).to.be.a('number');
            expect(data.numRows).to.be(0);
            expect(data.numColumns).to.be.a('number');
            expect(data.numColumns).to.be(0);
            expect(data.numMines).to.be.a('number');
            expect(data.numMines).to.be(0);
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(0);
            expect(data.result).to.be.a('number');
            expect(data.result).to.be(0);
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.lastStarted).to.be.a(Date);
            expect(data.lastStarted).to.be(new Date());
            {
              let dataCtr = data.cells;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(MinesweeperApi.Cell);
                expect(data.row).to.be.a('number');
                expect(data.row).to.be(0);
                expect(data.column).to.be.a('number');
                expect(data.column).to.be(0);
                expect(data.mine).to.be.a('boolean');
                expect(data.mine).to.be(false);
                expect(data.value).to.be.a('number');
                expect(data.value).to.be(0);
                expect(data.revealed).to.be.a('boolean');
                expect(data.revealed).to.be(false);
                expect(data.flagged).to.be.a('boolean');
                expect(data.flagged).to.be(false);

                      }
            }
            expect(data.elapsed).to.be.a('number');
            expect(data.elapsed).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('boardsPause', function() {
        it('should call boardsPause successfully', function(done) {
          // TODO: uncomment, update parameter values for boardsPause call and complete the assertions
          /*
          var id = 56;

          instance.boardsPause(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MinesweeperApi.Board);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.numRows).to.be.a('number');
            expect(data.numRows).to.be(0);
            expect(data.numColumns).to.be.a('number');
            expect(data.numColumns).to.be(0);
            expect(data.numMines).to.be.a('number');
            expect(data.numMines).to.be(0);
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(0);
            expect(data.result).to.be.a('number');
            expect(data.result).to.be(0);
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.lastStarted).to.be.a(Date);
            expect(data.lastStarted).to.be(new Date());
            {
              let dataCtr = data.cells;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(MinesweeperApi.Cell);
                expect(data.row).to.be.a('number');
                expect(data.row).to.be(0);
                expect(data.column).to.be.a('number');
                expect(data.column).to.be(0);
                expect(data.mine).to.be.a('boolean');
                expect(data.mine).to.be(false);
                expect(data.value).to.be.a('number');
                expect(data.value).to.be(0);
                expect(data.revealed).to.be.a('boolean');
                expect(data.revealed).to.be(false);
                expect(data.flagged).to.be.a('boolean');
                expect(data.flagged).to.be(false);

                      }
            }
            expect(data.elapsed).to.be.a('number');
            expect(data.elapsed).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('boardsResume', function() {
        it('should call boardsResume successfully', function(done) {
          // TODO: uncomment, update parameter values for boardsResume call and complete the assertions
          /*
          var id = 56;

          instance.boardsResume(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MinesweeperApi.Board);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.numRows).to.be.a('number');
            expect(data.numRows).to.be(0);
            expect(data.numColumns).to.be.a('number');
            expect(data.numColumns).to.be(0);
            expect(data.numMines).to.be.a('number');
            expect(data.numMines).to.be(0);
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(0);
            expect(data.result).to.be.a('number');
            expect(data.result).to.be(0);
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.lastStarted).to.be.a(Date);
            expect(data.lastStarted).to.be(new Date());
            {
              let dataCtr = data.cells;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(MinesweeperApi.Cell);
                expect(data.row).to.be.a('number');
                expect(data.row).to.be(0);
                expect(data.column).to.be.a('number');
                expect(data.column).to.be(0);
                expect(data.mine).to.be.a('boolean');
                expect(data.mine).to.be(false);
                expect(data.value).to.be.a('number');
                expect(data.value).to.be(0);
                expect(data.revealed).to.be.a('boolean');
                expect(data.revealed).to.be(false);
                expect(data.flagged).to.be.a('boolean');
                expect(data.flagged).to.be(false);

                      }
            }
            expect(data.elapsed).to.be.a('number');
            expect(data.elapsed).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('boardsRevealCell', function() {
        it('should call boardsRevealCell successfully', function(done) {
          // TODO: uncomment, update parameter values for boardsRevealCell call and complete the assertions
          /*
          var id = 56;
          var data = new MinesweeperApi.CellRef();
          data.row = 0;
          data.column = 0;

          instance.boardsRevealCell(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MinesweeperApi.Board);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.numRows).to.be.a('number');
            expect(data.numRows).to.be(0);
            expect(data.numColumns).to.be.a('number');
            expect(data.numColumns).to.be(0);
            expect(data.numMines).to.be.a('number');
            expect(data.numMines).to.be(0);
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(0);
            expect(data.result).to.be.a('number');
            expect(data.result).to.be(0);
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.lastStarted).to.be.a(Date);
            expect(data.lastStarted).to.be(new Date());
            {
              let dataCtr = data.cells;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(MinesweeperApi.Cell);
                expect(data.row).to.be.a('number');
                expect(data.row).to.be(0);
                expect(data.column).to.be.a('number');
                expect(data.column).to.be(0);
                expect(data.mine).to.be.a('boolean');
                expect(data.mine).to.be(false);
                expect(data.value).to.be.a('number');
                expect(data.value).to.be(0);
                expect(data.revealed).to.be.a('boolean');
                expect(data.revealed).to.be(false);
                expect(data.flagged).to.be.a('boolean');
                expect(data.flagged).to.be(false);

                      }
            }
            expect(data.elapsed).to.be.a('number');
            expect(data.elapsed).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('boardsUnflagCell', function() {
        it('should call boardsUnflagCell successfully', function(done) {
          // TODO: uncomment, update parameter values for boardsUnflagCell call
          /*
          var id = 56;
          var data = new MinesweeperApi.CellRef();
          data.row = 0;
          data.column = 0;

          instance.boardsUnflagCell(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
